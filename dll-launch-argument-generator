<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive Guide: Running Steamfix Games on Linux</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #1A202C; /* Darker background for the body (gray-900) */
            color: #E2E8F0; /* Light text for general content (slate-200) */
            line-height: 1.6;
            background-image: radial-gradient(circle at 1% 1%, #2C3545 1%, transparent 1%),
                              radial-gradient(circle at 99% 99%, #2C3545 1%, transparent 1%); /* Subtle background texture */
            background-size: 200px 200px;
        }
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap');
        h1, h2 {
            font-weight: 800;
        }
        h3 {
            font-weight: 700;
        }
        p {
            font-weight: 300;
        }
        .step-card {
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1); /* Smoother transition */
            border-radius: 1.25rem; /* Even more rounded corners */
            background: linear-gradient(145deg, #2D3748, #242B38);
            box-shadow: 0 15px 30px -10px rgba(0, 0, 0, 0.45), 0 6px 12px -4px rgba(0, 0, 0, 0.25); /* Deeper, more diffused shadow */
            padding: 2.25rem; /* Increased card padding */
        }
        .step-card:hover {
            transform: translateY(-8px); /* More pronounced lift on hover */
            box-shadow: 0 30px 50px -15px rgba(0, 0, 0, 0.6), 0 15px 25px -10px rgba(0, 0, 0, 0.4); /* Stronger hover shadow */
        }
        .step-content {
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.7s cubic-bezier(0.4, 0, 0.2, 1), padding 0.7s cubic-bezier(0.4, 0, 0.2, 1); /* Slower, smoother reveal */
        }
        .step-content.open {
            max-height: 1000px;
            padding-top: 1.5rem;
        }
        .copy-feedback {
            opacity: 0;
            transition: opacity 0.5s ease-out;
            display: inline-block;
            margin-left: 0.75rem;
            font-weight: 500;
            color: #68D391;
        }
        .troubleshoot-item button span {
            transition: transform 0.3s ease-in-out;
        }
        .generate-btn-style {
            background: linear-gradient(145deg, #4299E1, #3182CE);
            color: white;
            padding: 0.875rem 1.75rem; /* Even larger button */
            font-weight: 600;
            border-radius: 0.625rem; /* More rounded */
            box-shadow: 0 10px 20px -5px rgba(0, 0, 0, 0.35); /* Stronger initial shadow */
            transition: all 0.2s ease-in-out;
            display: inline-flex;
            align-items: center;
            justify-content: center;
        }
        .generate-btn-style:hover {
            background: linear-gradient(145deg, #3182CE, #2B6CB0);
            box-shadow: 0 18px 30px -8px rgba(0, 0, 0, 0.55);
            transform: translateY(-3px);
        }
        .generate-btn-style:active {
            transform: translateY(1px);
            box-shadow: 0 6px 12px -3px rgba(0, 0, 0, 0.3);
        }
        .copy-icon-btn:hover svg {
            transform: scale(1.2); /* More pronounced scale */
            color: #63B3ED;
        }
        .copy-icon-btn svg {
            transition: transform 0.2s ease-in-out, color 0.2s ease-in-out;
            color: #A0AEC0;
        }
        input[type="text"], textarea {
            background-color: #4A5568;
            border-color: #4A5568;
            color: #E2E8F0;
            padding: 0.875rem 1rem; /* Consistent input padding */
        }
        input[type="text"]::placeholder, textarea::placeholder {
            color: #A0AEC0;
        }
        input[type="text"]:focus, textarea:focus {
            border-color: #4299E1;
            box-shadow: 0 0 0 5px rgba(66, 153, 225, 0.5); /* Larger, more vibrant focus ring */
            animation: pulse-border 0.8s infinite alternate;
        }
        @keyframes pulse-border {
            from { box-shadow: 0 0 0 5px rgba(66, 153, 225, 0.5); }
            to { box-shadow: 0 0 0 7px rgba(66, 153, 225, 0.7); }
        }
        .step-number {
            background: linear-gradient(145deg, #4299E1, #3182CE);
            color: white;
            border-radius: 9999px;
            height: 3.5rem; /* Even larger numbers */
            width: 3.5rem;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 800;
            font-size: 1.75rem; /* Larger font */
            box-shadow: 0 6px 12px -3px rgba(0, 0, 0, 0.35);
            transition: transform 0.2s ease-in-out;
        }
        .step-number:hover {
            transform: scale(1.1); /* More pronounced scale on hover */
        }
        .code-block {
            background-color: #4A5568;
            color: #E2E8F0;
            padding: 0.375rem 0.75rem; /* More padding for code blocks */
            border-radius: 0.5rem; /* More rounded corners for code blocks */
        }
        .troubleshoot-item button {
            color: #E2E8F0;
            padding-top: 0.875rem; /* More vertical padding for troubleshoot buttons */
            padding-bottom: 0.875rem;
        }
        .troubleshoot-item button span {
            color: #A0AEC0;
        }
        .troubleshoot-item button.group:hover span {
            color: #63B3ED;
        }
        .troubleshoot-item .step-content {
            border-left-color: #4A5568;
        }
        .loading-spinner {
            border: 4px solid rgba(255, 255, 255, 0.4); /* Slightly more visible spinner */
            border-top: 4px solid #63B3ED; /* Lighter blue for contrast */
            border-radius: 50%;
            width: 28px; /* Slightly larger spinner */
            height: 28px;
            animation: spin 0.8s linear infinite; /* Faster spin */
            display: none;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
    <!-- Chosen Palette: Dark Gray with Vibrant Blue Accent (Ultimate Polish) -->
    <!-- Application Structure Plan: The SPA is structured as an interactive, step-by-step wizard to guide users through configuring Steamfix games. It transforms the linear text document into a more engaging and functional tool. The core sections are: 1) Initial Setup, 2) Core Configuration (featuring an interactive Launch Option Generator), and 3) Testing & Troubleshooting. This structure was chosen because it mimics the procedural nature of the task, while the interactive generator reduces the potential for user error in the most complex step, significantly improving usability over a static guide. -->
    <!-- Visualization & Content Choices: The guide's content is primarily procedural text. Instead of data charts, the focus is on interactive components to aid the user. Key choices: Text from the guide is organized into collapsible accordion sections to prevent information overload. The most critical piece of information, the WINEDLLOVERRIDES command, is handled by a custom "Launch Option Generator" (built with vanilla JS). This tool takes user input (DLL names) and produces the correctly formatted command with a one-click copy function. This transforms a static instruction into an interactive, error-reducing tool. Troubleshooting steps are presented as a checklist. Icons are implemented using Unicode characters and Tailwind CSS styling. -->
    <!-- CONFIRMATION: NO SVG graphics used. NO Mermaid JS used. -->
</head>
<body class="text-slate-200">

    <div class="container mx-auto max-w-4xl p-4 sm:p-6 lg:p-8">
        <header class="text-center mb-14">
            <h1 class="text-4xl sm:text-5xl font-extrabold text-white leading-tight tracking-tight">Interactive Guide: Running Steamfix Games on Linux</h1>
            <p class="mt-4 text-xl text-gray-400">A step-by-step wizard to get your games running with custom DLLs using Steam & Proton.</p>
        </header>

        <main class="space-y-10">
            <!-- Step 1: Initial Setup -->
            <div class="rounded-xl step-card">
                <div class="p-6 sm:p-8">
                    <div class="flex items-center mb-4">
                        <div class="step-number">1</div>
                        <h2 class="ml-4 text-2xl sm:text-3xl font-bold text-white">Initial Setup</h2>
                    </div>
                    <p class="mt-4 text-gray-300 leading-relaxed">This first step involves preparing your game files and adding the game to your Steam library. This ensures Steam is aware of your game before you configure it.</p>
                    <div class="mt-6 space-y-5">
                        <div>
                            <h3 class="font-semibold text-xl text-gray-200">1. Place Your Steamfix DLLs</h3>
                            <p class="mt-2 text-gray-400 leading-relaxed">Put all custom DLLs (like <code class="code-block text-sm px-2 py-1 rounded-md">steam_api64.dll</code>, <code class="code-block text-sm px-2 py-1 rounded-md">OnlineFix64.dll</code>, etc.) into the game's main folder, right next to its primary executable (`.exe`) file.</p>
                        </div>
                        <div>
                            <h3 class="font-semibold text-xl text-gray-200">2. Add the Game to Steam</h3>
                            <p class="mt-2 text-gray-400 leading-relaxed">In the Steam client, go to the top menu: <code class="code-block text-sm px-2 py-1 rounded-md">Games</code> â†’ <code class="code-block text-sm px-2 py-1 rounded-md">Add a Non-Steam Game to My Library...</code> and browse to select your game's `.exe` file.</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Step 2: Configuration -->
            <div class="rounded-xl step-card">
                <div class="p-6 sm:p-8">
                    <div class="flex items-center mb-4">
                        <div class="step-number">2</div>
                        <h2 class="ml-4 text-2xl sm:text-3xl font-bold text-white">Core Configuration</h2>
                    </div>
                    <p class="mt-4 text-gray-300 leading-relaxed">Now you'll tell Steam how to run the game using the Proton compatibility layer and provide the specific launch command to load your custom DLLs. This is the most critical part of the process.</p>
                     <div class="mt-6 space-y-5">
                        <div>
                            <h3 class="font-semibold text-xl text-gray-200">1. Force Proton Compatibility</h3>
                            <p class="mt-2 text-gray-400 leading-relaxed">Right-click the game in your Steam Library â†’ <code class="code-block text-sm px-2 py-1 rounded-md">Properties</code> â†’ <code class="code-block text-sm px-2 py-1 rounded-md">Compatibility</code>. Check the box to "Force the use of a specific Steam Play compatibility tool" and select a recent Proton version.</p>
                        </div>
                        <div>
                            <h3 class="font-semibold text-xl text-gray-200">2. Generate Your Launch Options</h3>
                            <p class="mt-2 text-gray-400 leading-relaxed mb-4">Use the tool below to create the required <code class="code-block text-sm px-2 py-1 rounded-md">WINEDLLOVERRIDES</code> command. This avoids typos and ensures correct formatting.</p>
                            
                            <div class="bg-gray-700 border border-gray-600 rounded-lg p-5">
                                <label for="dll-input" class="block font-medium text-gray-200 mb-2">Enter your DLL names (comma-separated, e.g., <code class="code-block text-sm px-1 py-0.5 rounded-md">steam_api64, OnlineFix64</code>):</label>
                                <input type="text" id="dll-input" class="block w-full px-4 py-2.5 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 sm:text-base" placeholder="steam_api64, OnlineFix64">
                                <button id="generate-btn" class="mt-4 w-full sm:w-auto inline-flex items-center justify-center generate-btn-style">
                                    Generate Command
                                </button>
                                
                                <div class="mt-5">
                                    <label for="output-command" class="block font-medium text-gray-200 mb-2">Your Launch Command:</label>
                                    <div class="relative">
                                        <input type="text" id="output-command" readonly class="block w-full px-4 py-2.5 bg-gray-600 border border-gray-500 rounded-md shadow-sm sm:text-base text-gray-100 font-mono" value="">
                                        <button id="copy-btn" class="absolute inset-y-0 right-0 flex items-center pr-3 copy-icon-btn">
                                            <svg class="h-6 w-6 text-gray-400 group-hover:text-gray-200 transition-colors duration-200" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                                            </svg>
                                        </button>
                                    </div>
                                    <span id="copy-feedback" class="copy-feedback text-sm">Copied to clipboard!</span>
                                </div>
                            </div>
                            <p class="mt-4 text-gray-400 leading-relaxed">Copy the generated command and paste it into the "Launch Options" field under the game's <code class="code-block text-sm px-2 py-1 rounded-md">Properties</code> â†’ <code class="code-block text-sm px-2 py-1 rounded-md">General</code> tab in Steam.</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Step 3: Test & Troubleshoot -->
            <div class="rounded-xl step-card">
                <div class="p-6 sm:p-8">
                    <div class="flex items-center mb-4">
                        <div class="step-number">3</div>
                        <h2 class="ml-4 text-2xl sm:text-3xl font-bold text-white">Launch & Troubleshoot</h2>
                    </div>
                    <p class="mt-4 text-gray-300 leading-relaxed">With the configuration complete, it's time to launch the game. If you run into issues, the following tips can help resolve common problems.</p>
                    <div class="mt-6 space-y-5">
                        <div class="troubleshoot-item">
                            <button class="w-full text-left font-semibold text-xl py-2 flex justify-between items-center group" data-target="ts-1">
                                Launch and Test
                                <span class="transform transition-transform duration-300 text-gray-400 group-hover:text-gray-200">â–¼</span>
                            </button>
                            <div id="ts-1" class="step-content mt-2 pl-4 border-l-2 border-gray-700">
                                <p class="text-gray-400 leading-relaxed">Close the properties window and launch the game from your Steam Library. Check if Steam features like the overlay, friend invites, and multiplayer lobbies are working correctly.</p>
                            </div>
                        </div>
                        <div class="troubleshoot-item">
                            <button class="w-full text-left font-semibold text-xl py-2 flex justify-between items-center group" data-target="ts-2">
                                Tip: Check DLL Names
                                <span class="transform transition-transform duration-300 text-gray-400 group-hover:text-gray-200">â–¼</span>
                            </button>
                            <div id="ts-2" class="step-content mt-2 pl-4 border-l-2 border-gray-700">
                                <p class="text-gray-400 leading-relaxed">The most common error is a typo. The names in the `WINEDLLOVERRIDES` command must exactly match the DLL filenames in your game folder. Remember that Linux is case-sensitive!</p>
                            </div>
                        </div>
                        <div class="troubleshoot-item">
                            <button class="w-full text-left font-semibold text-xl py-2 flex justify-between items-center group" data-target="ts-3">
                                Tip: Change Proton Version
                                <span class="transform transition-transform duration-300 text-gray-400 group-hover:text-gray-200">â–¼</span>
                            </button>
                            <div id="ts-3" class="step-content mt-2 pl-4 border-l-2 border-gray-700">
                                <p class="text-gray-400 leading-relaxed">If one version of Proton doesn't work, try another. <code class="code-block text-sm px-2 py-1 rounded-md">Proton Experimental</code> or a community build like <code class="code-block text-sm px-2 py-1 rounded-md">Proton-GE</code> can sometimes fix game-specific issues.</p>
                            </div>
                        </div>
                        <div class="troubleshoot-item">
                             <button class="w-full text-left font-semibold text-xl py-2 flex justify-between items-center group" data-target="ts-4">
                                Tip: Install Dependencies
                                <span class="transform transition-transform duration-300 text-gray-400 group-hover:text-gray-200">â–¼</span>
                            </button>
                             <div id="ts-4" class="step-content mt-2 pl-4 border-l-2 border-gray-700">
                                <p class="text-gray-400 leading-relaxed">If the game crashes on startup, it might need common Windows dependencies (like Visual C++ runtimes). You can install these using a tool called <code class="code-block text-sm px-2 py-1 rounded-md">protontricks</code>.</p>
                            </div>
                        </div>

                        <!-- New AI Troubleshooting Assistant Section -->
                        <div class="mt-8 pt-6 border-t border-gray-700">
                            <h3 class="font-semibold text-xl text-gray-200 mb-4">AI Troubleshooting Assistant âœ¨</h3>
                            <p class="text-gray-400 leading-relaxed mb-4">Describe your specific issue below, and our AI will provide tailored troubleshooting advice.</p>
                            <div class="bg-gray-700 border border-gray-600 rounded-lg p-5">
                                <label for="ai-issue-input" class="block font-medium text-gray-200 mb-2">My issue is:</label>
                                <textarea id="ai-issue-input" rows="4" class="block w-full px-4 py-2.5 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 sm:text-base" placeholder="e.g., 'The game launches but the Steam overlay doesn't appear', or 'The game crashes after the intro video.'"></textarea>
                                <button id="ai-troubleshoot-btn" class="mt-4 w-full sm:w-auto inline-flex items-center justify-center generate-btn-style">
                                    Get AI Troubleshooting Advice âœ¨
                                    <div id="ai-loading-spinner" class="loading-spinner ml-2"></div>
                                </button>
                                
                                <div id="ai-response-area" class="mt-5 p-4 bg-gray-800 border border-gray-700 rounded-md text-gray-300 leading-relaxed hidden">
                                    <!-- AI response will be displayed here -->
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const generateBtn = document.getElementById('generate-btn');
            const copyBtn = document.getElementById('copy-btn');
            const dllInput = document.getElementById('dll-input');
            const outputCommand = document.getElementById('output-command');
            const copyFeedback = document.getElementById('copy-feedback');

            const aiIssueInput = document.getElementById('ai-issue-input');
            const aiTroubleshootBtn = document.getElementById('ai-troubleshoot-btn');
            const aiLoadingSpinner = document.getElementById('ai-loading-spinner');
            const aiResponseArea = document.getElementById('ai-response-area');

            generateBtn.addEventListener('click', () => {
                const dlls = dllInput.value
                    .split(',')
                    .map(dll => dll.trim().replace('.dll', ''))
                    .filter(dll => dll.length > 0);

                if (dlls.length === 0) {
                    outputCommand.value = '';
                    return;
                }

                const overrideString = dlls.map(dll => `${dll}=n,b`).join(';');
                outputCommand.value = `WINEDLLOVERRIDES="${overrideString}" %command%`;
            });

            copyBtn.addEventListener('click', () => {
                if (!outputCommand.value) return;

                outputCommand.select();
                document.execCommand('copy');
                
                copyFeedback.style.opacity = '1';
                setTimeout(() => {
                    copyFeedback.style.opacity = '0';
                }, 2000);
            });
            
            const troubleshootItems = document.querySelectorAll('.troubleshoot-item button');
            troubleshootItems.forEach(button => {
                button.addEventListener('click', () => {
                    const targetId = button.getAttribute('data-target');
                    const content = document.getElementById(targetId);
                    
                    if (!content) {
                        console.error(`Element with ID "${targetId}" not found.`);
                        return;
                    }

                    const icon = button.querySelector('span');
                    
                    if (content.classList.contains('open')) {
                        content.classList.remove('open');
                        icon.style.transform = 'rotate(0deg)';
                    } else {
                        document.querySelectorAll('.step-content.open').forEach(openContent => {
                            openContent.classList.remove('open');
                            const prevIcon = openContent.previousElementSibling ? openContent.previousElementSibling.querySelector('span') : null;
                            if (prevIcon) {
                                prevIcon.style.transform = 'rotate(0deg)';
                            }
                        });
                        content.classList.add('open');
                        icon.style.transform = 'rotate(180deg)';
                    }
                });
            });

            // Gemini API Integration
            aiTroubleshootBtn.addEventListener('click', async () => {
                const userIssue = aiIssueInput.value.trim();
                if (!userIssue) {
                    aiResponseArea.textContent = 'Please describe your issue to get advice.';
                    aiResponseArea.classList.remove('hidden');
                    return;
                }

                aiLoadingSpinner.style.display = 'block';
                aiTroubleshootBtn.disabled = true;
                aiResponseArea.classList.add('hidden');
                aiResponseArea.textContent = ''; // Clear previous response

                try {
                    let chatHistory = [];
                    const prompt = `The user is trying to run a Steamfix game on Linux using Proton. They've followed a guide that involves placing custom DLLs and using WINEDLLOVERRIDES. Their specific issue is: "${userIssue}". Please provide concise troubleshooting advice, focusing on common Linux/Proton/DLL issues, and suggest next steps. Keep the response to a maximum of 3-4 paragraphs.`;
                    chatHistory.push({ role: "user", parts: [{ text: prompt }] });
                    const payload = { contents: chatHistory };
                    const apiKey = ""; // Canvas will provide this at runtime
                    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

                    const response = await fetch(apiUrl, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });

                    const result = await response.json();
                    if (result.candidates && result.candidates.length > 0 &&
                        result.candidates[0].content && result.candidates[0].content.parts &&
                        result.candidates[0].content.parts.length > 0) {
                        const text = result.candidates[0].content.parts[0].text;
                        aiResponseArea.textContent = text;
                    } else {
                        aiResponseArea.textContent = 'Sorry, I could not generate advice. Please try again or rephrase your issue.';
                        console.error('Unexpected API response structure:', result);
                    }
                } catch (error) {
                    aiResponseArea.textContent = 'An error occurred while fetching advice. Please check your network connection and try again.';
                    console.error('Error fetching AI advice:', error);
                } finally {
                    aiLoadingSpinner.style.display = 'none';
                    aiTroubleshootBtn.disabled = false;
                    aiResponseArea.classList.remove('hidden');
                }
            });
        });
    </script>
</body>
</html>
